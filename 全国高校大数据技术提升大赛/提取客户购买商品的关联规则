1.首先在Linux上新建/data/python14目录，并切换到该目录下。
sudo mkdir -p /data/python14/  
cd /data/python14/  

修改/data/python14目录下的所有文件及子目录的所有者和所属的组为zhangyu

sudo chown -R zhangyu.zhangyu /data/python14  

2.使用wget命令，将实验所需数据下载到linux本地/data/python14目录下。
sudo wget http://192.168.1.100:60000/allfiles/python14/menu_orders.xls  

3.新建Python项目，名为python14

在python14项目下，新建Python file，名为：Apriori


4.自行编写Apriori算法
# -*- coding: utf-8 -*-  
from __future__ import print_function  
import pandas as pd  
# 自定义连接函数，用于实现L_{k-1}到C_k的连接  
def connect_string(x, ms):  
    x = list(map(lambda i: sorted(i.split(ms)), x))  
    l = len(x[0])  
    r = []  
    for i in range(len(x)):  
        for j in range(i, len(x)):  
            if x[i][:l - 1] == x[j][:l - 1] and x[i][l - 1] != x[j][l - 1]:  
                r.append(x[i][:l - 1] + sorted([x[j][l - 1], x[i][l - 1]]))  
    return r  
# 寻找关联规则的函数  
def find_rule(d, support, confidence, ms=u'--'):  
    result = pd.DataFrame(index=['support', 'confidence'])  # 定义输出结果  
    support_series = 1.0 * d.sum() / len(d)  # 支持度序列  
    column = list(support_series[support_series > support].index)  # 初步根据支持度筛选  
    k = 0  
    while len(column) > 1:  
        k = k + 1  
        print(u'\nThe No %s search is in progress...' % k)  
        column = connect_string(column, ms)  
        print(u'nums：%s...' % len(column))  
        sf = lambda i: d[i].prod(axis=1, numeric_only=True)  # 新一批支持度的计算函数  
        # 创建连接数据，这一步耗时、耗内存最严重。当数据集较大时，可以考虑并行运算优化。  
        d_2 = pd.DataFrame(list(map(sf, column)), index=[ms.join(i) for i in column]).T  
        support_series_2 = 1.0 * d_2[[ms.join(i) for i in column]].sum() / len(d)  # 计算连接后的支持度  
        column = list(support_series_2[support_series_2 > support].index)  # 新一轮支持度筛选  
        support_series = support_series.append(support_series_2)  
        column2 = []  
        for i in column:  # 遍历可能的推理，如{A,B,C}究竟是A+B-->C还是B+C-->A还是C+A-->B？  
            i = i.split(ms)  
            for j in range(len(i)):  
                column2.append(i[:j] + i[j + 1:] + i[j:j + 1])  
        cofidence_series = pd.Series(index=[ms.join(i) for i in column2])  # 定义置信度序列  
        for i in column2:  # 计算置信度序列  
            cofidence_series[ms.join(i)] = support_series[ms.join(sorted(i))] / support_series[ms.join(i[:len(i) - 1])]  
        for i in cofidence_series[cofidence_series > confidence].index:  # 置信度筛选  
            result[i] = 0.0  
            result[i]['confidence'] = cofidence_series[i]  
            result[i]['support'] = support_series[ms.join(sorted(i.split(ms)))]  
    result = result.T.sort_values(['confidence', 'support'], ascending=False)  # 结果整理，输出  
    print(u'\nResult：')  
    print(result)  
    return result

其中connect_string为自定义连接函数，用于实现L_{k-1}（所有的频繁k-1项集的集合）到C_k(候选K集合)的连接。find_rule作为寻找关联规则的函数，其通过扫描所有的事务，确定C_K中每个候选的计数，判断是否小于最小支持度计数，如果不是，则认为该候选是频繁的。其利用Apriori性质：任一频繁项集的所有非空子集也必须是频繁的，反之，如果某个候选的非空子集不是频繁的，那么该候选肯定不是频繁的，从而可以将其从CK中删除。

5.新建python file文件，名为：cal_apriori


6.导入数据
inputfile = '/data/python14/menu_orders.xls'  
outputfile = '/data/python14/apriori_rules.xls' #结果文件  
data = pd.read_excel(inputfile, header = None)  
7.数据预处理


ct = lambda x : pd.Series(1, index = x[pd.notnull(x)]) #转换0-1矩阵的过渡函数  
b = map(ct, data.as_matrix()) #用map方式执行  
#print(list(b))  
data = pd.DataFrame(list(b)).fillna(0) #实现矩阵转换，空值用0填充  
print(u'\nConversion completed.')  
del b #删除中间变量b，节省内存  

8.建立模型

support = 0.2 #最小支持度  
confidence = 0.5 #最小置信度  
ms = '---' #连接符，默认'--'，用来区分不同元素，如A--B。需要保证原始表格中不含有该字符  
find_rule(data, support, confidence, ms).to_excel(outputfile) #保存结果  
9.完整代码

view plain copy
#-*- coding: utf-8 -*-
#使用Apriori算法挖掘菜品订单关联规则
from __future__ import print_function
import pandas as pd
from Apriori import * #导入自行编写的apriori函数
inputfile = '/data/python14/menu_orders.xls'
outputfile = '/data/python14/apriori_rules.xls' #结果文件
data = pd.read_excel(inputfile, header = None)
print('\nMatrix transforming...')
ct = lambda x : pd.Series(1, index = x[pd.notnull(x)]) #转换0-1矩阵的过渡函数
b = map(ct, data.as_matrix()) #用map方式执行
#print(list(b))
data = pd.DataFrame(list(b)).fillna(0) #实现矩阵转换，空值用0填充
print(u'\nConversion completed.')
del b #删除中间变量b，节省内存
support = 0.2 #最小支持度
confidence = 0.5 #最小置信度
ms = '---' #连接符，默认'--'，用来区分不同元素，如A--B。需要保证原始表格中不含有该字符
find_rule(data, support, confidence, ms).to_excel(outputfile) #保存结果
10.运行结果


其中，e---a表示e发生能够推出a发生，置信度为100%，支持度为30%；b---c---a表示b、c同时发生时能够推出a发生，置信度为60%，支持度为30%等。搜索出来的关联规则不一定具有实际意义，需要根据问题背景筛选适当的有意义的规则，并赋予合理的解释。